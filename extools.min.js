!function (e, t) { "undefined" != typeof module ? module.exports = t() : "function" == typeof define && "object" == typeof define.amd ? define(t) : e.extools = t() }(this, function () { "use strict"; function extools(e) { if (!(this instanceof extools)) return new extools(e); var t = this, a = { data: [], attributes: [] }; if (t.options = {}, ["data", "attributes", "name", "highlight", "date", "onChange", "multiple", "directory"].forEach(function (n) { t.options[n] = e[n] || a[n] }), t.container = document.querySelector(e.container), !t.container) throw new Error("Error! Could not find Container element"); if (t.container) switch (e.tool.toLowerCase()) { case "taginput": t._taginput(); break; case "datepicker": t._datepicker(); break; case "autocomplete": t._autocomplete(); break; case "calculator": t._calculator(); break; case "modal": t._modal(); break; case "clone": t._clone(); break; case "upload": t._upload(); break; default: throw new Error("Error! No Tool selected!") }t._addAttributes() } return extools.prototype = { constructor: extools, _taginput: function () { this.container.innerHTML = '<div class="et--taginput--container"><div class="control is-flex-1" data-target="insert"><div class="control has-icon-left"> <input type="text" class="input"> <span class="icon is-left"><i class="fas fa-angle-double-right"></i></span></div></div> <input type="text" class="hidden" data-target="value"></div>'; var e = this.container.querySelector("input"), t = this.container.querySelector('[data-target="value"]'), a = this.container.querySelector('[data-target="insert"]'), n = []; function i(t) { if ((t = l(t)).length > 0 && !n.find(e => e.text == t)) { let e = { text: t, el: document.createElement("span") }; e.el.classList.add("et--taginput--tag"), e.el.innerHTML = `<span>${t}</span><span class="delete" data-action="remove"></span>`, e.el.querySelector('[data-action="remove"]').onclick = (() => { o(n.indexOf(e)) }), n.push(e), a.parentNode.insertBefore(e.el, a), r() } e.value = "" } function o(e) { let t = n[e]; n.splice(e, 1), a.parentNode.removeChild(t.el), r() } function r() { let e = []; n.forEach(function (t) { e.push(t.text) }), t.value = e.join(",") } function l(e) { return e.trim() } this.options.name && (t.name = this.options.name), e.addEventListener("input", function () { let t = e.value.split(","); t.length > 1 && t.forEach(function (e) { let t = l(e); t.length > 0 && i(t) }) }), e.addEventListener("keydown", function (t) { "Enter" == t.code && i(e.value), "Backspace" == t.code && 0 == e.value.length && n.length > 0 && o(n.length - 1) }), this.options.data && this.options.data.forEach(function (e) { l(e).length > 0 && i(e) }) }, _modal: function () { var e = this.container.querySelector('[data-action="show"]'), t = this.container.querySelector('[data-target="hidden"]'), a = t.innerHTML; t.classList.add("et--modal--hidden"), t.innerHTML = `<div class="et--modal--overlay"></div><div class="et--modal--content"> ${a}</div>`, e.onclick = (() => { t.classList.add("is-active") }), t.querySelector(".et--modal--overlay").onclick = (() => { t.classList.remove("is-active") }) }, _clone: function () { var e = this, t = e.container.querySelector('[data-target="bucket"]'), a = e.container.querySelector('[data-target="source"]'), n = e.container.querySelector('[data-action="clone"]'), i = a.querySelector('[data-action="remove"]'), o = a.outerHTML.replace(/(\r\n|\n|\r)/gm, "").replace(/>( +)</g, "><"); i.onclick = (() => { t.removeChild(i.closest('[data-target="source"]')) }), t.dataset.html = JSON.stringify(o), n.onclick = (() => { let a = e._createElementFromHtml(JSON.parse(t.dataset.html)), n = a.querySelector('[data-action="remove"]'); n.onclick = (() => { t.removeChild(n.closest('[data-target="source"]')) }), t.appendChild(a) }) }, _autocomplete: function () { var e, t = this; t.container.innerHTML = '<div class="et--autocomplete" data-target="container"><input type="text" class="input" data-target="input"></div>'; var a = t.container.querySelector('[data-target="container"]'), n = t.container.querySelector('[data-target="input"]'); function i(i) { var o, l, s = this.value; if (r(), !s) return !1; e = -1, (o = document.createElement("div")).classList.add("et--autocomplete--list"), t.options.data.filter(e => e.toUpperCase().includes(s.toUpperCase())).forEach(e => { l = document.createElement("div"); let a = e.substr(e.toUpperCase().indexOf(s.toUpperCase()), s.length); l.innerHTML = t.options.highlight ? e.replace(new RegExp(a.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"), "g"), `<span style="background-color: ${t.options.highlight}">${a}</span>`) : e.replace(new RegExp(a.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"), "g"), `<b>${a}</b>`), l.dataset.value = e, l.onclick = function () { n.value = this.dataset.value, r() }, o.appendChild(l) }), a.appendChild(o) } function o(t) { if (!t) return !1; !function (e) { for (var t = 0; t < e.length; t++)e[t].classList.remove("is-active") }(t), e >= t.length && (e = 0), e < 0 && (e = t.length - 1), t[e].classList.add("is-active") } function r(e) { let a = t.container.querySelector(".et--autocomplete--list"); e != a && e != n && a && a.parentNode.removeChild(a) } t.options.name && (n.name = t.options.name), n.onfocus = i, n.oninput = i, n.onkeydown = function (a) { let n = t.container.querySelector(".et--autocomplete--list"); n && (n = n.querySelectorAll("div")), 40 == a.keyCode ? (e++ , o(n)) : 38 == a.keyCode ? (e-- , o(n)) : 13 == a.keyCode && (a.preventDefault(), e > -1 && n && n[e].click()) }, document.addEventListener("click", function (e) { r(e.target) }) }, _datepicker: function () { const e = { firstDayOfWeek: 1, toISOFormatedString: e => `${e.getFullYear()}-${e.getMonth() + 1 < 10 ? "0" + (e.getMonth() + 1) : e.getMonth() + 1}-${e.getDate() < 10 ? "0" + e.getDate() : e.getDate()}`, toLocaleDateString: e => `${e.getDate() < 10 ? "0" + e.getDate() : e.getDate()}/${e.getMonth() + 1 < 10 ? "0" + (e.getMonth() + 1) : e.getMonth() + 1}/${e.getFullYear()}`, HTMLMonthOptions: (e = !1) => { e || (e = (new Date).getMonth() + 1); let t = ""; for (let a = 1; a < e; a++)t += `<option value="${a}">Tháng ${a}</option>`; t += `<option value="${e}" selected="selected">Tháng ${e}</option>`; for (let a = e + 1; a <= 12; a++)t += `<option value="${a}">Tháng ${a}</option>`; return t }, HTMLYearOptions: (e = !1) => { e || (e = (new Date).getFullYear()); let t = ""; for (let a = e + 10; a > e; a--)t += `<option value="${a}">${a}</option>`; t += `<option value="${e}" selected="selected">${e}</option>`; for (let a = 1; a <= 10; a++)t += `<option value="${e - a}">${e - a}</option>`; return t }, weekBuilder(e, t, a) { const n = new Date(a, t), i = [], o = new Date(a, t, e).getDay(), r = o >= this.firstDayOfWeek ? o - this.firstDayOfWeek : 7 - this.firstDayOfWeek + o; let l = 1; for (let t = 0; t < r; t++)i.unshift(new Date(n.getFullYear(), n.getMonth(), e - l)), l++; i.push(new Date(a, t, e)); let s = 1; for (; i.length < 7;)i.push(new Date(a, t, e + s)), s++; return i }, weeksInThisMonth(e, t) { const a = new Date(e, t + 1, 0).getDate(); let n = [], i = 1; for (; i <= a + 6;) { const a = this.weekBuilder(i, t, e); let o = !1; for (let e of a) if (e.getMonth() === t) { o = !0; break } o && n.push(a), i += 7 } return n } }; var t, a, n, i = this; i.container.classList.add("et--datepicker"), i.container.innerHTML = '<input class="input" data-target="input"><div class="et--datepicker--calendar"><div class="et--datepicker--header"> <a class="button previous-month" data-action="previous"><span class="icon"><i class="fas fa-chevron-left"></i></span></a><div class="month-year-picker"><div class="select"> <select data-target="month"></select></div><div class="select"> <select data-target="year"></select></div></div> <a class="button next-month" data-action="next"><span class="icon"><i class="fas fa-chevron-right"></i></span></a></div><div class="et--datepicker--table"><div class="weeks"><div class="day">T2</div><div class="day">T3</div><div class="day">T4</div><div class="day">T5</div><div class="day">T6</div><div class="day">T7</div><div class="day is-weekend">CN</div></div><div class="calendar" data-target="calendar"></div></div></div><div class="et--datepicker--overlay" data-target="overlay"></div> <input class="hidden" data-target="value">'; var o = i.container.querySelector('input[data-target="input"]'), r = i.container.querySelector('input[data-target="value"]'), l = i.container.querySelector('[data-target="overlay"]'), s = i.container.querySelector('[data-target="month"]'), c = i.container.querySelector('[data-target="year"]'), d = i.container.querySelector('[data-target="calendar"]'), u = i.container.querySelector('[data-action="previous"]'), v = i.container.querySelector('[data-action="next"]'); function p() { s.innerHTML = e.HTMLMonthOptions(t), c.innerHTML = e.HTMLYearOptions(a), d.innerHTML = function () { const i = e.weeksInThisMonth(a, t - 1), o = e.toISOFormatedString(new Date); let r = []; for (let a of i) { let i = '<div class="week">'; for (let r of a) { let a = e.toISOFormatedString(r), l = a === o, s = a === n, c = 0 === r.getDay(), d = r.getMonth() === t - 1, u = "day"; l && (u += " is-today"), s && (u += " is-selected"), d || (u += " is-unselectable"), c && (u += " is-weekend"), i += `<span class="${u}" data-date="${a}" ${d ? 'data-action="pickDate"' : ""}>${r.getDate()}</span>` } i += "</div>", r.push(i) } return r.join("\n") }(), d.querySelectorAll('[data-action="pickDate"]').forEach(e => { e.onclick = h }) } function f(e) { let n = t + e, i = a; 0 === n ? (n = 12, i--) : 13 == n && (n = 1, i++), t = n, a = i, p() } function h(t) { d.querySelectorAll(".day").forEach(e => { e.classList.remove("is-selected") }), t.target.closest(".day").classList.add("is-selected"), o.value = e.toLocaleDateString(new Date(t.target.dataset.date)), r.value = t.target.dataset.date, n = t.target.dataset.date, g() } function g() { i.container.classList.remove("is-active"), o.blur() } function m(e, t) { if ("0" !== e.charAt(0) || "00" == e) { var a = parseInt(e); (isNaN(a) || a <= 0 || a > t) && (a = 1), e = a > parseInt(t.toString().charAt(0)) && 1 == a.toString().length ? "0" + a : a.toString() } return e } i.options.date && (o.value = e.toLocaleDateString(new Date(i.options.date))), s.innerHTML = e.HTMLMonthOptions(t), c.innerHTML = e.HTMLYearOptions(a), o.value ? function (i) { let l = i.split("/"); const s = new Date(`${l[1]}-${l[0]}-${l[2]}`); if ("Invalid Date" == s) return !1; s.getDate(), t = s.getMonth() + 1, a = s.getFullYear(), o.value = i, n = e.toISOFormatedString(s), r.value = n }(o.value) : ((new Date).getDate(), t = (new Date).getMonth() + 1, a = (new Date).getFullYear()), i.options.name && (r.name = i.options.name), l.onclick = (() => { g() }), o.onfocus = (() => { i.container.classList.add("is-active") }), o.oninput = function () { this.type = "text"; var e = this.value; /\D\/$/.test(e) && (e = e.substr(0, e.length - 3)); var n = e.split("/").map(function (e) { return e.replace(/\D/g, "") }); n[0] && (n[0] = m(n[0], 31)), n[1] && (n[1] = m(n[1], 12)); var i = n.map(function (e, t) { return 2 == e.length && t < 2 ? e + "/" : e }); if (this.value = i.join("").substr(0, 14), 3 === this.value.split("/").length) { let e = this.value.split("/")[0], n = this.value.split("/")[1], i = this.value.split("/")[2]; if ("Invalid Date" != new Date(`${n}-${e}-${i}`)) { let o = new Date(`${n}-${e}-${i}`); o.getDate(), t = o.getMonth() + 1, a = o.getFullYear(), p() } } }, o.onblur = function () { this.type = "text"; var e = this.value.split("/").map(function (e, t) { return e.replace(/\D/g, "") }), t = ""; if (3 == e.length) { var a = 4 !== e[2].length ? parseInt(e[2]) + 2e3 : parseInt(e[2]), n = parseInt(e[1]) - 1, i = parseInt(e[0]), o = new Date(a, n, i); if (!isNaN(o)) t = [o.getMonth() + 1, o.getDate(), o.getFullYear()].map(function (e) { return 1 == (e = e.toString()).length ? "0" + e : e }).join("/") } this.value = t }, s.onchange = (() => { t = parseInt(s.value), p() }), c.onchange = (() => { a = parseInt(c.value), p() }), u.onclick = (() => { f(-1) }), v.onclick = (() => { f(1) }), p() }, _calculator: function () { var self = this; self.container.classList.add("et--calculator"), self.container.innerHTML = '<div class="et--calculator--input" data-target="output"></div><div><div class="et--calculator--operators"><div>+</div><div>-</div><div>&times;</div><div>&divide;</div></div><div class="et--calculator--leftPanel"><div class="et--calculator--numbers"><div>7</div><div>8</div><div>9</div></div><div class="et--calculator--numbers"><div>4</div><div>5</div><div>6</div></div><div class="et--calculator--numbers"><div>1</div><div>2</div><div>3</div></div><div class="et--calculator--numbers"><div>0</div><div>.</div><div data-action="clear">C</div></div></div><div class="et--calculator--equal" data-action="result">=</div> <input type="hidden" data-target="value"></div>'; var numbers = self.container.querySelectorAll(".et--calculator--numbers div"), buttons = self.container.querySelectorAll(".et--calculator--operators div"), resultBtn = self.container.querySelector('[data-action="result"]'), output = self.container.querySelector('[data-target="output"]'), value = self.container.querySelector('[data-target="value"]'), formula = ""; function calculate() { try { formula = Math.round(100 * eval(formula.replace(/×/g, "*").replace(/÷/g, "/"))) / 100, output.textContent = formula, value.value = formula } catch (e) { } } self.options.name && (value.name = self.options.name), numbers.forEach(e => { "C" == e.textContent ? e.onclick = (() => { formula = "", output.textContent = "" }) : e.onclick = (() => { formula += e.textContent, output.textContent = formula }) }), buttons.forEach(e => { e.onclick = (() => { formula += e.textContent, output.textContent = formula }) }), resultBtn.onclick = (() => { calculate() }) }, _upload: function () { this.container.innerHTML = `<div class="et--upload" data-target="zone"><div class="file"> <label class="file-label"> <input class="file-input" type="file" ${!0 === this.options.multiple ? "multiple" : ""} data-target="files"> <span class="file-cta"> <span class="file-icon"> <i class="fas fa-upload"></i> </span> <span class="file-label"> Choose a file… </span> </span> </label></div></div>`; var e = this.container.querySelector('input[data-target="files"]'), t = this.container.querySelector('[data-target="zone"]'); function a(e) { if (console.log(e.name), e.isDirectory) { e.createReader().readEntries(function (e) { e.forEach(function (e) { a(e) }) }) } } this.options.name && (e.name = this.options.name), !0 === this.options.directory && (e.webkitdirectory = !0), t.ondragover = (e => { e.preventDefault(), t.classList.add("dragover") }), t.ondragleave = (e => { e.preventDefault(), t.classList.remove("dragover") }), t.ondrop = (e => { let n = event.dataTransfer.items; e.preventDefault(), t.classList.remove("dragover"); for (let e = 0; e < n.length; e++) { let t = n[e].webkitGetAsEntry(); t && a(t) } }), e.onchange = this.options.onChange }, _addAttributes: function () { this.options.attributes.forEach(e => { if (e.el) var t = this.container.querySelector(e.el); else t = this.container; if (!t) throw new Error("Error! Can not find Attribute element!"); t.setAttribute(e.name, e.value) }) }, _createElementFromHtml: function (e) { let t = document.createElement("div"); return t.innerHTML = e, t.firstChild } }, extools });